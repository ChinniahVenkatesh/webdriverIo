"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _lodash = _interopRequireDefault(require("lodash"));

var _platform = require("platform");

var _makeElementScreenshot = _interopRequireDefault(require("./modules/makeElementScreenshot"));

var _makeDocumentScreenshot = _interopRequireDefault(require("./modules/makeDocumentScreenshot"));

var _makeViewportScreenshot = _interopRequireDefault(require("./modules/makeViewportScreenshot"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _getUserAgent = _interopRequireDefault(require("./scripts/getUserAgent"));

var _mapViewports = require("./modules/mapViewports");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var log = (0, _logger["default"])('wdio-novus-visual-regression-service');

var VisualRegressionLauncher = /*#__PURE__*/function () {
  function VisualRegressionLauncher(options) {
    (0, _classCallCheck2["default"])(this, VisualRegressionLauncher);
    this.options = options;
    this.currentSuite = null;
    this.currentTest = null;
    this.currentFeature = null;
    this.currentScenario = null;
    this.currentStep = null;
  }
  /**
   * Gets executed once before all workers get launched.
   * @param {Object} config wdio configuration object
   * @param {Array.<Object>} capabilities list of capabilities details
   */


  (0, _createClass2["default"])(VisualRegressionLauncher, [{
    key: "onPrepare",
    value: function () {
      var _onPrepare = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(config) {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.validateConfig(config);
                log.setLevel(config.logLevel || 'info');
                this.compare = this.options.compare;
                log.info('Launching onPrepare functions');
                _context.next = 6;
                return this.runHook('onPrepare');

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function onPrepare(_x) {
        return _onPrepare.apply(this, arguments);
      }

      return onPrepare;
    }()
    /**
     * Gets executed before test execution begins. At this point you can access
     * all global variables, such as `this.options`.
     * It is the perfect place to define custom commands.
     * @param  {object} capabilities desiredCapabilities
     * @param  {[type]} specs        [description]
     * @return {Promise}
     */

  }, {
    key: "before",
    value: function () {
      var _before = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(capabilities, specs) {
        var userAgent, _parsePlatform, name, version, ua;

        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.validateConfig();
                this.compare = this.options.compare;
                this.viewportChangePause = _lodash["default"].get(this.options, 'viewportChangePause', 100);
                this.viewports = this.options.viewports;
                this.orientations = this.options.orientations;
                _context2.next = 7;
                return browser.execute(_getUserAgent["default"]);

              case 7:
                userAgent = _context2.sent;
                _parsePlatform = (0, _platform.parse)(userAgent), name = _parsePlatform.name, version = _parsePlatform.version, ua = _parsePlatform.ua;
                this.context = {
                  browser: {
                    name: name,
                    version: version,
                    userAgent: ua
                  },
                  desiredCapabilities: capabilities,
                  specs: specs
                };
                browser.addCommand('checkElement', this.wrapCommand(browser, 'element', _makeElementScreenshot["default"]));
                browser.addCommand('checkDocument', this.wrapCommand(browser, 'document', _makeDocumentScreenshot["default"]));
                browser.addCommand('checkViewport', this.wrapCommand(browser, 'viewport', _makeViewportScreenshot["default"]));
                _context2.next = 15;
                return this.runHook('before', this.context);

              case 15:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function before(_x2, _x3) {
        return _before.apply(this, arguments);
      }

      return before;
    }()
    /**
     * Hook that gets executed before the suite starts
     * @param {Object} suite suite details
     */

  }, {
    key: "beforeSuite",
    value: function beforeSuite(suite) {
      this.currentSuite = suite;
    }
    /**
     * Hook that gets executed after the suite has ended
     * @param {Object} suite suite details
     */

  }, {
    key: "afterSuite",
    value: function afterSuite(suite) {
      this.currentSuite = null;
    }
    /**
     * Function to be executed before a test (in Mocha/Jasmine) or a step (in Cucumber) starts.
     * @param {Object} test test details
     */

  }, {
    key: "beforeTest",
    value: function beforeTest(test) {
      this.currentTest = test;
    }
    /**
     * Function to be executed after a test (in Mocha/Jasmine) or a step (in Cucumber) ends.
     * @param {Object} test test details
     */

  }, {
    key: "afterTest",
    value: function afterTest(test) {
      this.currentTest = null;
    }
    /**
     * Function to be executed before a feature starts in Cucumber.
     * @param  {Object} feature feature details
     */

  }, {
    key: "beforeFeature",
    value: function beforeFeature(feature) {
      this.currentFeature = feature;
    }
    /**
     * Function to be executed after a feature ends in Cucumber.
     * @param  {Object} feature feature details
     */

  }, {
    key: "afterFeature",
    value: function afterFeature(feature) {
      this.currentFeature = null;
    }
    /**
     * Function to be executed before a scenario starts in Cucumber.
     * @param  {Object} scenario scenario details
     */

  }, {
    key: "beforeScenario",
    value: function beforeScenario(scenario) {
      this.currentScenario = scenario;
    }
    /**
     * Function to be executed after a scenario ends in Cucumber.
     * @param  {Object} scenario scenario details
     */

  }, {
    key: "afterScenario",
    value: function afterScenario(scenario) {
      this.currentScenario = null;
    }
    /**
     * Function to be executed before a step starts in Cucumber.
     * @param  {Object} step step details
     */

  }, {
    key: "beforeStep",
    value: function beforeStep(step) {
      this.currentStep = step;
    }
    /**
     * Function to be executed after a step ends in Cucumber.
     * @param  {Object} stepResult stepResult details
     */

  }, {
    key: "afterStep",
    value: function afterStep(stepResult) {
      this.currentStep = null;
    }
    /**
     * Gets executed after all tests are done. You still have access to all global
     * variables from the test.
     * @param  {object} capabilities desiredCapabilities
     * @param  {[type]} specs        [description]
     * @return {Promise}
     */

  }, {
    key: "after",
    value: function () {
      var _after = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(capabilities, specs) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.runHook('after', capabilities, specs);

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function after(_x4, _x5) {
        return _after.apply(this, arguments);
      }

      return after;
    }()
    /**
     * Gets executed after all workers got shut down and the process is about to exit.
     * @param {Object} exitCode 0 - success, 1 - fail
     * @param {Object} config wdio configuration object
     * @param {Array.<Object>} capabilities list of capabilities details
     */

  }, {
    key: "onComplete",
    value: function () {
      var _onComplete = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(exitCode, config, capabilities) {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.runHook('onComplete');

              case 2:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function onComplete(_x6, _x7, _x8) {
        return _onComplete.apply(this, arguments);
      }

      return onComplete;
    }()
  }, {
    key: "runHook",
    value: function () {
      var _runHook = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(hookName) {
        var _this$compare,
            _len,
            args,
            _key,
            _args5 = arguments;

        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!(typeof this.compare[hookName] === 'function')) {
                  _context5.next = 5;
                  break;
                }

                for (_len = _args5.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = _args5[_key];
                }

                _context5.next = 4;
                return (_this$compare = this.compare)[hookName].apply(_this$compare, args);

              case 4:
                return _context5.abrupt("return", _context5.sent);

              case 5:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function runHook(_x9) {
        return _runHook.apply(this, arguments);
      }

      return runHook;
    }()
  }, {
    key: "validateConfig",
    value: function validateConfig() {
      if (!_lodash["default"].isPlainObject(this.options) || !_lodash["default"].has(this.options, 'compare')) {
        throw new Error('Please provide a novus-visual-regression service configuration with a compare method in your wdio-conf.js!');
      }
    }
  }, {
    key: "wrapCommand",
    value: function wrapCommand(browser, type, command) {
      var _this = this;

      var baseContext = {
        type: type,
        browser: this.context.browser,
        desiredCapabilities: this.context.desiredCapabilities
      };
      var runHook = this.runHook.bind(this);

      var getTestDetails = function getTestDetails() {
        return _this.getTestDetails();
      };

      var resolutionKeySingle = browser.isMobile ? 'orientation' : 'viewport';
      var resolutionKeyPlural = browser.isMobile ? 'orientations' : 'viewports';
      var resolutionMap = browser.isMobile ? _mapViewports.mapOrientations : _mapViewports.mapViewports;
      var viewportChangePauseDefault = this.viewportChangePause;
      var resolutionDefault = browser.isMobile ? this.orientations : this.viewports;
      return /*#__PURE__*/function () {
        var _async = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8() {
          var _len2,
              args,
              _key2,
              url,
              elementSelector,
              options,
              exclude,
              hide,
              remove,
              resolutions,
              viewportChangePause,
              results,
              _args8 = arguments;

          return _regenerator["default"].wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  for (_len2 = _args8.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args8[_key2];
                  }

                  _context8.next = 3;
                  return browser.getUrl();

                case 3:
                  url = _context8.sent;
                  elementSelector = type === 'element' ? args[0] : undefined;
                  options = _lodash["default"].isPlainObject(args[args.length - 1]) ? args[args.length - 1] : {};
                  exclude = options.exclude, hide = options.hide, remove = options.remove;
                  resolutions = _lodash["default"].get(options, resolutionKeyPlural, resolutionDefault);
                  viewportChangePause = _lodash["default"].get(options, 'viewportChangePause', viewportChangePauseDefault);
                  _context8.next = 11;
                  return resolutionMap(browser, viewportChangePause, resolutions, /*#__PURE__*/function () {
                    var _takeScreenshot = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(resolution) {
                      var meta, screenshotContext, screenshotContextCleaned, base64Screenshot;
                      return _regenerator["default"].wrap(function _callee6$(_context6) {
                        while (1) {
                          switch (_context6.prev = _context6.next) {
                            case 0:
                              meta = _lodash["default"].pickBy((0, _defineProperty2["default"])({
                                url: url,
                                element: elementSelector,
                                exclude: exclude,
                                hide: hide,
                                remove: remove
                              }, resolutionKeySingle, resolution), _lodash["default"].identity);
                              screenshotContext = _objectSpread(_objectSpread(_objectSpread({}, baseContext), getTestDetails()), {}, {
                                meta: meta,
                                options: options
                              });
                              screenshotContextCleaned = _lodash["default"].pickBy(screenshotContext, _lodash["default"].identity);
                              _context6.next = 5;
                              return runHook('beforeScreenshot', screenshotContextCleaned);

                            case 5:
                              _context6.next = 7;
                              return command.apply(void 0, [browser].concat(args));

                            case 7:
                              base64Screenshot = _context6.sent;
                              _context6.next = 10;
                              return runHook('afterScreenshot', screenshotContextCleaned, base64Screenshot);

                            case 10:
                              return _context6.abrupt("return", [screenshotContextCleaned, base64Screenshot]);

                            case 11:
                            case "end":
                              return _context6.stop();
                          }
                        }
                      }, _callee6);
                    }));

                    function takeScreenshot(_x10) {
                      return _takeScreenshot.apply(this, arguments);
                    }

                    return takeScreenshot;
                  }(), /*#__PURE__*/function () {
                    var _processScreenshot = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(screenshotContextCleaned, base64Screenshot) {
                      return _regenerator["default"].wrap(function _callee7$(_context7) {
                        while (1) {
                          switch (_context7.prev = _context7.next) {
                            case 0:
                              _context7.next = 2;
                              return runHook('processScreenshot', screenshotContextCleaned, base64Screenshot);

                            case 2:
                              return _context7.abrupt("return", _context7.sent);

                            case 3:
                            case "end":
                              return _context7.stop();
                          }
                        }
                      }, _callee7);
                    }));

                    function processScreenshot(_x11, _x12) {
                      return _processScreenshot.apply(this, arguments);
                    }

                    return processScreenshot;
                  }());

                case 11:
                  results = _context8.sent;
                  return _context8.abrupt("return", results);

                case 13:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8);
        }));

        function async() {
          return _async.apply(this, arguments);
        }

        return async;
      }();
    }
  }, {
    key: "getTestDetails",
    value: function getTestDetails() {
      return _lodash["default"].pickBy({
        // mocha
        suite: this.currentSuite,
        test: this.currentTest,
        // cucumber
        feature: this.currentFeature,
        scenario: this.currentScenario,
        step: this.currentStep
      }, _lodash["default"].identity);
    }
  }]);
  return VisualRegressionLauncher;
}();

module.exports = VisualRegressionLauncher;