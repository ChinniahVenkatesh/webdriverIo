"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _BaseCompare2 = _interopRequireDefault(require("./BaseCompare"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _nodeclientSpectre = _interopRequireDefault(require("nodeclient-spectre"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var fs = require('fs');

var path = require('path');

var log = (0, _logger["default"])('wdio-novus-visual-regression-service:Spectre');
var runtimeConfigName = 'spectre-run';

var Spectre = /*#__PURE__*/function (_BaseCompare) {
  (0, _inherits2["default"])(Spectre, _BaseCompare);

  var _super = _createSuper(Spectre);

  function Spectre() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2["default"])(this, Spectre);
    _this = _super.call(this);
    _this.fuzzLevel = _lodash["default"].get(options, 'fuzzLevel', 30);
    _this.spectreURL = options.url;
    _this.project = options.project;
    _this.suite = options.suite;
    _this.test = options.test;
    _this.browser = options.browser;
    _this.size = options.size;
    _this.spectreClient = new _nodeclientSpectre["default"](_this.spectreURL);
    return _this;
  }

  (0, _createClass2["default"])(Spectre, [{
    key: "onPrepare",
    value: function () {
      var _onPrepare = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var creationOptions, result, test_run_url;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                creationOptions = "Api-Url: ".concat(this.spectreURL, ", Project: ").concat(this.project, ", Suite: ").concat(this.suite);
                log.info("".concat(creationOptions, " - Creating testrun"));
                _context.next = 4;
                return this.spectreClient.createTestrun(this.project, this.suite);

              case 4:
                result = _context.sent;
                log.info("".concat(creationOptions, " - Testrun created - Run-Id: #").concat(result.id));
                test_run_url = "".concat(this.spectreURL).concat(result.url);
                log.info(test_run_url);
                fs.writeFileSync(path.resolve('./.spectre_test_run_url.json'), test_run_url);
                this.saveRuntimeConfig(runtimeConfigName, result);

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function onPrepare() {
        return _onPrepare.apply(this, arguments);
      }

      return onPrepare;
    }()
  }, {
    key: "processScreenshot",
    value: function () {
      var _processScreenshot = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(context, base64Screenshot) {
        var runDetails, testrunID, test, browser, size, fuzzLevel, url, uploadName, result;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.getRuntimeConfig(runtimeConfigName);

              case 2:
                runDetails = _context2.sent;
                testrunID = runDetails.id;
                _context2.next = 6;
                return this.test(context);

              case 6:
                test = _context2.sent;
                _context2.next = 9;
                return this.browser(context);

              case 9:
                browser = _context2.sent;
                _context2.next = 12;
                return this.size(context);

              case 12:
                size = _context2.sent;
                fuzzLevel = "".concat(_lodash["default"].get(context, 'options.fuzzLevel', this.fuzzLevel), "%");
                url = _lodash["default"].get(context, 'meta.url', undefined);
                uploadName = "Run-Id: #".concat(testrunID, ", Test: ").concat(test, ", Url: ").concat(url, ", Browser: ").concat(browser, ", Size: ").concat(size, ", Fuzz-Level: ").concat(fuzzLevel);
                log.info("".concat(uploadName, " - Starting upload"));
                _context2.next = 19;
                return this.spectreClient.submitScreenshot(test, browser, size, base64Screenshot, testrunID, '', url, fuzzLevel);

              case 19:
                result = _context2.sent;
                log.info("".concat(uploadName, " - Upload successful"));

                if (!result.pass) {
                  _context2.next = 26;
                  break;
                }

                log.info("".concat(uploadName, " - Image is within tolerance or the same"));
                return _context2.abrupt("return", this.createResultReport(result.diff, result.pass, true));

              case 26:
                log.info("".concat(uploadName, " - Image is different! ").concat(result.diff, "%"));
                return _context2.abrupt("return", this.createResultReport(result.diff, result.pass, true));

              case 28:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function processScreenshot(_x, _x2) {
        return _processScreenshot.apply(this, arguments);
      }

      return processScreenshot;
    }()
  }, {
    key: "onComplete",
    value: function () {
      var _onComplete = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.cleanUpRuntimeConfigs();

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function onComplete() {
        return _onComplete.apply(this, arguments);
      }

      return onComplete;
    }()
  }]);
  return Spectre;
}(_BaseCompare2["default"]);

exports["default"] = Spectre;