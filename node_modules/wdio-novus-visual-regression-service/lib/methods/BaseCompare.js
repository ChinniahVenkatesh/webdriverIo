"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("@wdio/logger"));

var log = (0, _logger["default"])('wdio-novus-visual-regression-service:BaseCompare');
var runtimeConfigPath = __dirname;

var BaseCompare = /*#__PURE__*/function () {
  function BaseCompare() {
    (0, _classCallCheck2["default"])(this, BaseCompare);
    this.configs = new Map();
  }
  /**
   * Gets executed once before all workers get launched.
   */


  (0, _createClass2["default"])(BaseCompare, [{
    key: "onPrepare",
    value: function () {
      var _onPrepare = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt("return", Promise.resolve());

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function onPrepare() {
        return _onPrepare.apply(this, arguments);
      }

      return onPrepare;
    }()
    /**
     * Gets executed before the tests starts.
     */

  }, {
    key: "before",
    value: function () {
      var _before = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(context) {
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", Promise.resolve());

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function before(_x) {
        return _before.apply(this, arguments);
      }

      return before;
    }()
    /**
     * Gets executed immediately before the screenshot is taken.
     */

  }, {
    key: "beforeScreenshot",
    value: function () {
      var _beforeScreenshot = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(context) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", Promise.resolve());

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function beforeScreenshot(_x2) {
        return _beforeScreenshot.apply(this, arguments);
      }

      return beforeScreenshot;
    }()
    /**
     * Gets executed after the screenshot is taken.
     */

  }, {
    key: "afterScreenshot",
    value: function () {
      var _afterScreenshot = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(context, base64Screenshot) {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", Promise.resolve());

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function afterScreenshot(_x3, _x4) {
        return _afterScreenshot.apply(this, arguments);
      }

      return afterScreenshot;
    }()
    /**
     * You can do here your image comparison magic.
     */

  }, {
    key: "processScreenshot",
    value: function () {
      var _processScreenshot = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(context, base64Screenshot) {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                return _context5.abrupt("return", Promise.resolve());

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function processScreenshot(_x5, _x6) {
        return _processScreenshot.apply(this, arguments);
      }

      return processScreenshot;
    }()
    /**
     * Gets executed after all tests are done. You still have access to all global
     * variables from the test.
     */

  }, {
    key: "after",
    value: function () {
      var _after = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                return _context6.abrupt("return", Promise.resolve());

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function after() {
        return _after.apply(this, arguments);
      }

      return after;
    }()
    /**
     * Gets executed after all workers got shut down and the process is about to exit.
     */

  }, {
    key: "onComplete",
    value: function () {
      var _onComplete = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7() {
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                return _context7.abrupt("return", Promise.resolve());

              case 1:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function onComplete() {
        return _onComplete.apply(this, arguments);
      }

      return onComplete;
    }()
    /**
     * Prepare runtime config for worker process
     */

  }, {
    key: "saveRuntimeConfig",
    value: function () {
      var _saveRuntimeConfig = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8(name, config) {
        var file;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                file = this.getRuntimeConfigFileName(name);
                log.info("Save runtime config ".concat(name, " to file ").concat(file));
                _context8.next = 4;
                return _fsExtra["default"].writeJson(file, config, {
                  spaces: 2
                });

              case 4:
                this.configs.set(name, config);

              case 5:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function saveRuntimeConfig(_x7, _x8) {
        return _saveRuntimeConfig.apply(this, arguments);
      }

      return saveRuntimeConfig;
    }()
    /**
     * Read prepared runtime config from launcher process
     */

  }, {
    key: "getRuntimeConfig",
    value: function () {
      var _getRuntimeConfig = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9(name) {
        var file, config;
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                if (!this.configs.has(name)) {
                  _context9.next = 3;
                  break;
                }

                log.info("Read runtime config ".concat(name, " from cache"));
                return _context9.abrupt("return", this.configs.get(name));

              case 3:
                // otherwise read from fs
                file = this.getRuntimeConfigFileName(name);
                log.info("Read runtime config ".concat(name, " from file ").concat(file));
                _context9.next = 7;
                return _fsExtra["default"].readJson(file);

              case 7:
                config = _context9.sent;
                // and cache the result
                this.configs.set(name, config);
                return _context9.abrupt("return", config);

              case 10:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function getRuntimeConfig(_x9) {
        return _getRuntimeConfig.apply(this, arguments);
      }

      return getRuntimeConfig;
    }()
    /**
     * Remove runtime config
     */

  }, {
    key: "removeRuntimeConfig",
    value: function () {
      var _removeRuntimeConfig = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10(name) {
        var file;
        return _regenerator["default"].wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                // delete from fs
                file = this.getRuntimeConfigFileName(name);
                log.info("Remove runtime config ".concat(name, " file ").concat(file));
                _context10.next = 4;
                return _fsExtra["default"].remove(file);

              case 4:
                // delete from cache
                this.configs["delete"](name);

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function removeRuntimeConfig(_x10) {
        return _removeRuntimeConfig.apply(this, arguments);
      }

      return removeRuntimeConfig;
    }()
    /**
     * Removes all created runtime configs
     */

  }, {
    key: "cleanUpRuntimeConfigs",
    value: function () {
      var _cleanUpRuntimeConfigs = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11() {
        var _this = this;

        var names;
        return _regenerator["default"].wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                // clean up all saved config files
                names = (0, _toConsumableArray2["default"])(this.configs.keys());
                _context11.next = 3;
                return Promise.all(names.map(function (n) {
                  return _this.removeRuntimeConfig(n);
                }));

              case 3:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));

      function cleanUpRuntimeConfigs() {
        return _cleanUpRuntimeConfigs.apply(this, arguments);
      }

      return cleanUpRuntimeConfigs;
    }()
    /**
     * Builds a non-conflicting file name for this webdriverio run
     */

  }, {
    key: "getRuntimeConfigFileName",
    value: function getRuntimeConfigFileName(name) {
      // launcher and runner gets the same arguments, so let's use them to build a hash to determine different calls
      var hash = require('crypto').createHash('md5').update(process.argv.slice(2).join('')).digest('hex').substring(0, 4); // try to use process id to generate a unique file name for each webdriverio instance


      var runner = global.browser != null;
      var pid = !process.hasOwnProperty('ppid') ? null : runner ? process.ppid : process.pid; // generate file name suffix

      var suffix = [hash, pid].filter(Boolean).join('-');
      return _path["default"].join(runtimeConfigPath, "".concat(name, "-").concat(suffix, ".json"));
    }
  }, {
    key: "createResultReport",
    value: function createResultReport(misMatchPercentage, isWithinMisMatchTolerance, isSameDimensions) {
      return {
        misMatchPercentage: misMatchPercentage,
        isWithinMisMatchTolerance: isWithinMisMatchTolerance,
        isSameDimensions: isSameDimensions,
        isExactSameImage: misMatchPercentage === 0
      };
    }
  }]);
  return BaseCompare;
}();

exports["default"] = BaseCompare;