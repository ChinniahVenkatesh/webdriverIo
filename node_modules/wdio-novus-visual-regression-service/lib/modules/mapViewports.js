"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapViewports = mapViewports;
exports.mapOrientations = mapOrientations;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getViewportSize = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
    var res;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return browser.execute(function () {
              return {
                screenWidth: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),
                screenHeight: Math.max(document.documentElement.clientHeight, window.innerHeight || 0)
              };
            });

          case 2:
            res = _context.sent;
            return _context.abrupt("return", {
              width: res.screenWidth,
              height: res.screenHeight
            });

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function getViewportSize() {
    return _ref.apply(this, arguments);
  };
}();

function mapViewports(_x, _x2) {
  return _mapViewports.apply(this, arguments);
}

function _mapViewports() {
  _mapViewports = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(browser, delay) {
    var viewports,
        iterateeScreenshot,
        iterateeProcess,
        results,
        viewport,
        params,
        _iterator,
        _step,
        _viewport,
        _params,
        _args2 = arguments;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            viewports = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : [];
            iterateeScreenshot = _args2.length > 3 ? _args2[3] : undefined;
            iterateeProcess = _args2.length > 4 ? _args2[4] : undefined;
            results = [];

            if (viewports.length) {
              _context2.next = 14;
              break;
            }

            _context2.next = 7;
            return getViewportSize();

          case 7:
            viewport = _context2.sent;
            _context2.next = 10;
            return iterateeScreenshot(viewport);

          case 10:
            params = _context2.sent;
            results.push(iterateeProcess.apply(void 0, (0, _toConsumableArray2["default"])(params)));
            _context2.next = 37;
            break;

          case 14:
            _iterator = _createForOfIteratorHelper(viewports);
            _context2.prev = 15;

            _iterator.s();

          case 17:
            if ((_step = _iterator.n()).done) {
              _context2.next = 29;
              break;
            }

            _viewport = _step.value;
            _context2.next = 21;
            return browser.setWindowSize(_viewport.width, _viewport.height);

          case 21:
            _context2.next = 23;
            return browser.pause(delay);

          case 23:
            _context2.next = 25;
            return iterateeScreenshot(_viewport);

          case 25:
            _params = _context2.sent;
            results.push(iterateeProcess.apply(void 0, (0, _toConsumableArray2["default"])(_params)));

          case 27:
            _context2.next = 17;
            break;

          case 29:
            _context2.next = 34;
            break;

          case 31:
            _context2.prev = 31;
            _context2.t0 = _context2["catch"](15);

            _iterator.e(_context2.t0);

          case 34:
            _context2.prev = 34;

            _iterator.f();

            return _context2.finish(34);

          case 37:
            return _context2.abrupt("return", Promise.all(results));

          case 38:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[15, 31, 34, 37]]);
  }));
  return _mapViewports.apply(this, arguments);
}

function mapOrientations(_x3, _x4) {
  return _mapOrientations.apply(this, arguments);
}

function _mapOrientations() {
  _mapOrientations = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(browser, delay) {
    var orientations,
        iterateeScreenshot,
        iterateeProcess,
        results,
        orientation,
        params,
        _iterator2,
        _step2,
        _orientation,
        _params2,
        _args3 = arguments;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            orientations = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : [];
            iterateeScreenshot = _args3.length > 3 ? _args3[3] : undefined;
            iterateeProcess = _args3.length > 4 ? _args3[4] : undefined;
            results = [];

            if (orientations.length) {
              _context3.next = 14;
              break;
            }

            _context3.next = 7;
            return browser.getOrientation();

          case 7:
            orientation = _context3.sent;
            _context3.next = 10;
            return iterateeScreenshot(orientation);

          case 10:
            params = _context3.sent;
            results.push(iterateeProcess.apply(void 0, (0, _toConsumableArray2["default"])(params)));
            _context3.next = 37;
            break;

          case 14:
            _iterator2 = _createForOfIteratorHelper(orientations);
            _context3.prev = 15;

            _iterator2.s();

          case 17:
            if ((_step2 = _iterator2.n()).done) {
              _context3.next = 29;
              break;
            }

            _orientation = _step2.value;
            _context3.next = 21;
            return browser.setOrientation(_orientation);

          case 21:
            _context3.next = 23;
            return browser.pause(delay);

          case 23:
            _context3.next = 25;
            return iterateeScreenshot(_orientation);

          case 25:
            _params2 = _context3.sent;
            results.push(iterateeProcess.apply(void 0, (0, _toConsumableArray2["default"])(_params2)));

          case 27:
            _context3.next = 17;
            break;

          case 29:
            _context3.next = 34;
            break;

          case 31:
            _context3.prev = 31;
            _context3.t0 = _context3["catch"](15);

            _iterator2.e(_context3.t0);

          case 34:
            _context3.prev = 34;

            _iterator2.f();

            return _context3.finish(34);

          case 37:
            return _context3.abrupt("return", Promise.all(results));

          case 38:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[15, 31, 34, 37]]);
  }));
  return _mapOrientations.apply(this, arguments);
}